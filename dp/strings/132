package main

import "fmt"

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

//s[i] == s[j]
func equal(s string, i, j int) bool {
	return s[i:i+1] == s[j:j+1]
}

var dp []int

func try_update(end1, end2 int) {
	dp[end1+1] = min(dp[end1+1], dp[end2]+1)
}
func minCut(s string) int {
	n := len(s)
	dp = make([]int, n+1) // number of cuts for the first k characters
	for i := 0; i <= n; i++ {
		dp[i] = i - 1
	}

	for i := 0; i < n; i++ {
		for j := 0; i+j < n && i-j >= 0; j++ {
			if equal(s, i-j, i+j) {
				try_update(i+j, i-j)
			} else {
				break
			}
		}
		for j := 1; i+j < n && i-(j-1) >= 0; j++ {
			if equal(s, i+j, i-(j-1)) {
				try_update(i+j, i-(j-1))
			} else {
				break
			}
		}
	}

	return dp[n]
}

func main() {
	fmt.Println(minCut("aab"))
}
