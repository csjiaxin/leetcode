package main

import (
	"fmt"
	"math"
	"strconv"
	"strings"
)

var m map[string]int

func get(s []int) string {
	ss := make([]string, len(s))
	for i, v := range s {
		ss[i] = strconv.Itoa(v)
	}
	return strings.Join(ss, ",")
}
func min(a, b int) int {
	if a > b {
		return b
	}
	return a
}
func dfs(s []int) int {
	k := get(s)
	if v, ok := m[k]; ok {
		return v
	}
	ans := 1000000
	notzero := 0
	notv := 0
	for i := 0; i < len(s); i++ {
		if s[i] != 0 {
			notzero += 1
			notv = s[i]
			for j := i + 1; j < len(s); j++ {
				if s[j] != 0 {
					isave := s[i]
					jsave := s[j]
					if s[i] == s[j] {
						s[i] = 0
						s[j] = 0
					} else {
						s[j] = int(math.Abs(float64(s[i] - s[j])))
						s[i] = 0
					}
					ans = min(ans, dfs(s))
					s[i], s[j] = isave, jsave
				}
			}
		}
	}
	if notzero <= 1 {
		ans = notv
	}
	m[k] = ans
	return ans
}
func lastStoneWeightII(stones []int) int {
	m = map[string]int{}
	return dfs(stones)
}
func main() {
	fmt.Println(lastStoneWeightII([]int{2, 7, 4, 1, 8, 1}))
}
