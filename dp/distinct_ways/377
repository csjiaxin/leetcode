package main

import "fmt"

func Init(m, n, dvalue int) [][]int {
	dp := make([][]int, m)
	for i := 0; i < len(dp); i++ {
		dp[i] = make([]int, n)
		for j := 0; j < len(dp[i]); j++ {
			dp[i][j] = dvalue
		}
	}
	return dp
}

var dp []int

func dfs(nums []int, target int) int {
	if target < 0 {
		return 0
	} else if target == 0 {
		return 1
	}
	if dp[target] >= 0 {
		return dp[target]
	}
	ret := 0
	for i := 0; i < len(nums); i++ {
		ret += dfs(nums, target-nums[i])
	}
	dp[target] = ret
	return ret
}
func combinationSum4(nums []int, target int) int {
	dp = make([]int, target+1)
	for i := 0; i < len(dp); i++ {
		dp[i] = -1
	}
	return dfs(nums, target)
	// n := len(nums)
	// dp := make([]int, target+1)
	// dp[0] = 1
	// for i := 0; i < n; i++ {
	// 	for t := 0; nums[i]+t <= target; t++ {
	// 		dp[nums[i]+t] += dp[t]
	// 	}
	// }
	// return dp[target]
}

func main() {
	fmt.Println(combinationSum4([]int{1, 2, 3}, 4))
}
