package main

import (
	"fmt"
	"math"
)

var memo map[string]int
var M int = 6

func dfs(l int, c, cnum int, rollMax []int) int {
	if l == 0 {
		return 1
	}
	key := fmt.Sprintf("%d,%d,%d", l, c, cnum)
	if v, ok := memo[key]; ok {
		return v
	}
	ans := 0
	for i := 0; i < M; i++ {
		if i == c && cnum < rollMax[i] {
			ans += dfs(l-1, i, cnum+1, rollMax)
		} else if i != c {
			ans += dfs(l-1, i, 1, rollMax)
		}
		ans = int(math.Mod(float64(ans), 1e9+7))
	}
	memo[key] = ans
	return ans
}
func dieSimulator(n int, rollMax []int) int {
	memo = map[string]int{}
	ans := 0
	for i := 0; i < 6; i++ {
		ans += dfs(n-1, i, 1, rollMax)
		ans = int(math.Mod(float64(ans), 1e9+7))
	}
	return ans
}

func main() {
	fmt.Println(dieSimulator(2, []int{1, 1, 2, 2, 2, 3}))
}
