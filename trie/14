type Node struct {
	end   bool
	child map[byte]*Node
}

type Trie struct {
	end   bool
	child map[byte]*Trie
	c     byte
}

func Constructor() Trie {
	t := Trie{

		end:   false,
		child: make(map[byte]*Trie),
	}
	return t
}

func (this *Trie) Insert(word string) {
	node := this
	for i := 0; i < len(word); i++ {
		c := word[i]
		if v, ok := node.child[c]; ok {
			node = v
		} else {
			tnode := Constructor()
			tnode.c = c
			node.child[c] = &tnode
			node = &tnode
		}
	}
	node.end = true
}
func (this *Trie) find(word string) *Trie {
	node := this
	for i := 0; i < len(word); i++ {
		c := word[i]
		if _, ok := node.child[c]; !ok {
			return nil
		}
		node = node.child[c]
	}
	return node
}

func (this *Trie) Search(word string) bool {
	node := this.find(word)
	if node != nil {
		return node.end
	}
	return false
}

func (this *Trie) StartsWith(prefix string) bool {
	node := this.find(prefix)
	if node != nil {
		return true
	}
	return false
}
func longestCommonPrefix(strs []string) string {
	obj := Constructor()
	for _, s := range strs {
		obj.Insert(s)
	}

	ret := ""
	node := &obj
	for node != nil {
		if node.c != 0 {
			ret = ret + string(node.c)
		}

		if len(node.child) == 1 && node.end == false {
			for _, v := range node.child {
				node = v
			}
		} else {
			break
		}

	}
	return ret
}