package main

import (
	"fmt"
	"strings"
)

type Ele string
type Trie struct {
	root   bool
	end    bool
	child  map[Ele]*Trie
	c      Ele
	parent *Trie
}

func Constructor() Trie {
	t := Trie{
		parent: nil,
		end:    false,
		child:  make(map[Ele]*Trie),
		root:   true,
	}
	return t
}

func (this *Trie) Insert(eles []Ele) {
	node := this
	for i := 0; i < len(eles); i++ {
		c := eles[i]
		if v, ok := node.child[c]; ok {
			node = v
		} else {
			tnode := Constructor()
			tnode.root = false
			tnode.parent = node
			tnode.c = c
			node.child[c] = &tnode
			node = &tnode
		}
	}
	node.end = true
}
func (this *Trie) find(eles []Ele) *Trie {
	node := this
	for i := 0; i < len(eles); i++ {
		c := eles[i]
		if _, ok := node.child[c]; !ok {
			return nil
		}
		node = node.child[c]
	}
	return node
}

// func (this *Trie) Search(eles []Ele) bool {
// 	node := this.find(el))
// 	if node != nil {
// 		return node.end
// 	}
// 	return false
// }

// func (this *Trie) StartsWith(eles []Ele) bool {
// 	node := this.find(prefix)
// 	if node != nil {
// 		return true
// 	}
// 	return false
// }

func (this *Trie) build() string {
	ret := ""
	n := this
	for n != nil {
		if n.root != true {
			ret = "/" + string(n.c) + ret
		}
		n = n.parent
	}
	return ret
}

func pre(p *Trie, suggestion []string) []string {
	if p != nil {
		if p.end == true {
			suggestion = append(suggestion, p.build())
		} else {
			for _, v := range p.child {
				suggestion = pre(v, suggestion)
			}
		}
	}
	return suggestion

}

func removeSubfolders(folder []string) []string {
	obj := Constructor()
	for _, p := range folder {
		ps := strings.Split(p, "/")
		vs := []Ele{}
		for _, s := range ps {
			if s != "" {
				vs = append(vs, Ele(s))
			}
		}
		obj.Insert([]Ele(vs))
	}
	return pre(&obj, []string{})

}

func main() {
	fmt.Println(removeSubfolders([]string{"/a", "/a/b", "/c/d", "/c/d/e", "/c/f"}))
}
