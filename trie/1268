package main

import "fmt"

type Trie struct {
	end    bool
	child  map[byte]*Trie
	c      byte
	parent *Trie
}

func Constructor() Trie {
	t := Trie{
		parent: nil,
		end:    false,
		child:  make(map[byte]*Trie),
	}
	return t
}

func (this *Trie) Insert(word string) {
	node := this
	for i := 0; i < len(word); i++ {
		c := word[i]
		if v, ok := node.child[c]; ok {
			node = v
		} else {
			tnode := Constructor()
			tnode.parent = node
			tnode.c = c
			node.child[c] = &tnode
			node = &tnode
		}
	}
	node.end = true
}
func (this *Trie) find(word string) *Trie {
	node := this
	for i := 0; i < len(word); i++ {
		c := word[i]
		if _, ok := node.child[c]; !ok {
			return nil
		}
		node = node.child[c]
	}
	return node
}

func (this *Trie) Search(word string) bool {
	node := this.find(word)
	if node != nil {
		return node.end
	}
	return false
}

func (this *Trie) StartsWith(prefix string) bool {
	node := this.find(prefix)
	if node != nil {
		return true
	}
	return false
}

func (this *Trie) build() string {
	ret := ""
	n := this
	for n != nil {
		if n.c != 0{
			ret = string(n.c) + ret
		}
		n = n.parent
	}
	return ret
}
func pre(p *Trie, suggestion []string) []string {
	if p != nil {
		if p.end == true {
			if len(suggestion) <= 3 {
				suggestion = append(suggestion, p.build())

			}
		}
		for k := byte('a'); k <= byte('z'); k++ {
			if v, ok := p.child[k]; ok {
				suggestion = pre(v, suggestion)
			}
		}
	}
	return suggestion

}
func suggestedProducts(products []string, searchWord string) [][]string {
	obj := Constructor()
	for _, p := range products {
		obj.Insert(p)
	}
	ret := [][]string{}
	for i := 0; i < len(searchWord); i++ {
		node := obj.find(searchWord[:i+1])
		suggestion := []string{}
		suggestion = pre(node, suggestion)
		ret = append(ret, suggestion)

	}
	return ret
}

func main() {
	fmt.Println(suggestedProducts([]string{"mobile", "mouse", "moneypot", "monitor", "mousepad"}, "mouse"))
	// fmt.Println(suggestedProducts([]string{"h"}, "h"))
}
