package main

import "fmt"

func min(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

var outEdges = 0
var id = 0
var ids []int
var low []int
var visit []bool
var n int
var bridge [][]int
var adj [][]int

func buildAdjList(N int, connections [][]int) [][]int {
	list := make([][]int, N)
	for _, e := range connections {
		list[e[0]] = append(list[e[0]], e[1])
		list[e[1]] = append(list[e[1]], e[0])
	}
	return list
}
func dfs(root int, at int, parent int) {
	if root == parent {
		outEdges += 1
	}
	visit[at] = true
	id += 1
	ids[at] = id
	low[at] = id

	for _, to := range adj[at] {
		if to == parent {
			continue
		}
		if !visit[to] {
			dfs(root, to, at)
			if ids[at] < low[to] {
				//
				bridge = append(bridge, []int{at, to})
			}
			// if low[to] == ids[at] {
			// 	// isArt[at]=true
			// }
		}
		low[at] = min(low[at], low[to])
	}
}

func criticalConnections(N int, connections [][]int) [][]int {
	adj = buildAdjList(N, connections)
	id = 0
	outEdges = 0
	n = N
	visit = make([]bool, n)
	ids = make([]int, n)
	low = make([]int, n)
	bridge = make([][]int, 0)

	for i := 0; i < n; i++ {
		outEdges = 0
		if !visit[i] {

			dfs(i, i, -1)
		}
		// if outEdges > 1 {
		// 	// isArt

		// }
	}
	return bridge
}

func main() {
	fmt.Println(criticalConnections(4, [][]int{{0, 1}, {1, 2}, {2, 0}, {1, 3}}))
}
