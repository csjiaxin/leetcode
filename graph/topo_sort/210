package main

import "fmt"

type Color int

const (
	White Color = iota
	Gray
	Black
)

var visit []Color
var ret bool
var retArr []int

type AdjType map[string]map[string]bool

var adj AdjType

func insert_edge(adj AdjType, from, to int) {
	if v, ok := adj[from]; ok {
		v[to] = true
	} else {
		adj[from] = make(map[int]bool)
		adj[from][to] = true
	}

}
func buildAdj(edges [][]int) AdjType {
	adj := make(AdjType)
	for _, e := range edges {
		insert_edge(adj, e[0], e[1])
		// insert_edge(adj, e[1], e[0])
	}
	return adj
}

func dfs(at int) {
	if visit[at] == White {
		visit[at] = Gray
		for to, _ := range adj[at] {
			dfs(to)
		}
		visit[at] = Black
		retArr = append(retArr, at)

	} else if visit[at] == Gray {
		ret = false
	}
}
func findOrder(numCourses int, prerequisites [][]int) []int {

	retArr = make([]int, 0)
	adj = buildAdj(prerequisites)
	visit = make([]Color, numCourses)
	ret = true

	for to := 0; to < numCourses; to++ {
		dfs(to)
	}
	if ret == false {
		return []int{}
	}
	return retArr
}

func main() {
	fmt.Println(findOrder(2, [][]int{{1, 0}}))
}
