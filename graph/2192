package main

import (
	"fmt"
	"sort"
)

func getAncestors(n int, edges [][]int) [][]int {
	indegree := make([]int, n)
	from := make([][]int, n)
	to := make([][]int, n)
	for _, c := range edges {
		from[c[1]] = append(from[c[1]], c[0])
		to[c[0]] = append(to[c[0]], c[1])
		indegree[c[1]] += 1
	}
	ancestor := make([]map[int]bool, n)
	for i := range ancestor {
		ancestor[i] = map[int]bool{}
	}

	q := make([]int, 0)
	for i, in := range indegree {
		if in == 0 {
			q = append(q, i)
		}
	}
	// visit := make([]bool, n)
	// q = append(q, 0)
	// visit[0] = true
	for len(q) > 0 {
		q2 := make([]int, 0)
		for _, v := range q {
			// visit[v] = true
			for _, vt := range to[v] {
				for f := range ancestor[v] {
					ancestor[vt][f] = true
				}
				ancestor[vt][v] = true
				indegree[vt] -= 1
				if indegree[vt] == 0 {
					q2 = append(q2, vt)
				}
			}
		}
		q = q2
	}
	ancestorArr := make([][]int, n)
	for i, v := range ancestor {
		for f := range v {
			ancestorArr[i] = append(ancestorArr[i], f)
		}
		sort.Ints(ancestorArr[i])
	}
	return ancestorArr
}
func main() {
	fmt.Println(getAncestors(8, [][]int{{0, 3}, {0, 4}, {1, 3}, {2, 4}, {2, 7}, {3, 5}, {3, 6}, {3, 7}, {4, 6}}))
}
