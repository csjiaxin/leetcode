package main

import "fmt"

func meet(stones []int, target int) bool {
	used := make([]bool, len(stones))
	dis := 0
	for i := 1; i < len(stones); i++ {
		diff := stones[i] - stones[i-1]
		dis = dis + diff
		if diff > target {
			return false
		}
		if dis > target {
			used[i-1] = true
			dis = diff
		}
	}
	last := 0
	for i := 1; i < len(stones); i++ {
		if used[i] == false {
			diff := stones[i] - stones[last]
			if diff > target {
				return false
			}
			last = i
		}
	}
	return true
}
func maxJump(stones []int) int {
	l := 1
	h := int(1e9)
	for l <= h {
		m := (l + h) / 2
		if meet(stones, m) {
			h = m - 1
		} else {
			l = m + 1
		}
	}
	if meet(stones, h) {
		return h
	}
	return l
}

func main() {
	fmt.Println(maxJump([]int{0, 2, 5, 6, 7}))
	fmt.Println(maxJump([]int{0, 3, 9}))
}
