package main

type Ele struct {
	i int
	v int
}
type (
	Stack struct {
		top    *node
		length int
	}
	node struct {
		value Ele
		prev  *node
	}
)

func New() *Stack {
	return &Stack{nil, 0}
}
func (this *Stack) Len() int {
	return this.length
}
func (this *Stack) Peek() Ele {
	return this.top.value
}
func (this *Stack) Pop() Ele {
	n := this.top
	this.top = n.prev
	this.length--
	return n.value
}
func (this *Stack) Push(value Ele) {
	n := &node{value, this.top}
	this.top = n
	this.length++
}
func initArr(arr []int, n int, v int) {
	for i := 0; i < n; i++ {
		arr[i] = v
	}
}
func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}
func min(a int, b int) int {
	if a > b {
		return b
	}
	return a
}

func find132pattern(nums []int) bool {
	n := len(nums)
	s := New()
	s2 := 0 // s1,s3,s2 <- s1<s2<s3
	s2Found := false
	for j := n - 1; j >= 0; j-- {
		if s2Found && nums[j] < s2 {
			return true
		}
		for s.Len() > 0 && s.Peek().v < nums[j] {
			e := s.Pop()
			if s2Found {
				s2 = max(s2, e.v)
			} else {
				s2Found = true
				s2 = e.v
			}
		}
		s.Push(Ele{j, nums[j]})
	}
	return false
}

func main() {
	// println(find132pattern([]int{3, 1, 4, 2}))
	println(find132pattern([]int{3, 5, 0, 3, 4}))
}
