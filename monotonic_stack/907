package main

import (
	"fmt"
	"math"
)

type Ele struct{
	i int 
	v byte
}
type (
	Stack struct {
		top    *node
		length int
	}
	node struct {
		value Ele
		prev  *node
	}
)

func New() *Stack {
	return &Stack{nil, 0}
}
func (this *Stack) Len() int {
	return this.length
}
func (this *Stack) Peek() Ele {
	return this.top.value
}
func (this *Stack) Pop() Ele {
	n := this.top
	this.top = n.prev
	this.length--
	return n.value
}
func (this *Stack) Push(value Ele) {
	n := &node{value, this.top}
	this.top = n
	this.length++
}
func initArr(arr []int, n int, v int) {
	for i := 0; i < n; i++ {
		arr[i] = v
	}
}
func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

func removeDuplicateLetters(s string) string {
	n=len(s)
   	lastIndex := [byte]int{}
	for i:=0;i<n;i++{
		c:=s[i]
		lastIndex[c]=i
	}
	stack := New()
	use := make([]bool,n)
	for i:=0;i<n;i++{
		c:=s[i]
		for stack.Len()> 0 && stack.Peek().v >= c {
			e :=stack.Pop()
			if lastIndex[v] >= i {
				use[e.i]=false
			}
		}
		use[i]=true
		stack.Push(Ele{i,c})
	}
	r := ""
	for i:=0;i<n;i++{
		if use[i]{
			r += s[i]
		}
	}
	return r
}

func main() {
	println(removeDuplicateLetters("cbacdcbc"))
}
