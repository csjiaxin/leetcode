package main

import "fmt"

type Ele struct {
	i int
	v int
}
type (
	Stack struct {
		top    *node
		length int
	}
	node struct {
		value Ele
		prev  *node
	}
)

func New() *Stack {
	return &Stack{nil, 0}
}
func (this *Stack) Len() int {
	return this.length
}
func (this *Stack) Peek() Ele {
	return this.top.value
}
func (this *Stack) Pop() Ele {
	n := this.top
	this.top = n.prev
	this.length--
	return n.value
}
func (this *Stack) Push(value Ele) {
	n := &node{value, this.top}
	this.top = n
	this.length++
}
func initArr(arr []int, n int, v int) {
	for i := 0; i < n; i++ {
		arr[i] = v
	}
}
func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

func trap(height []int) int {
	n := len(height)
	nextBig := make([]int, n)
	initArr(nextBig, n, -1)

	s := New()
	for i := 0; i < n; i++ {
		for s.Len() > 0 && s.Peek().v <= height[i] {
			e := s.Pop()
			nextBig[e.i] = i
		}
		s.Push(Ele{i, height[i]})
	}
	r := 0
	for i := 0; i < n; {
		j := nextBig[i]
		if j != -1 {
			// fmt.Println(i, j, r)
			for k := i + 1; k < j; k++ {
				r += height[i] - height[k]
			}
			i = j
		} else {
			i += 1
		}
	}
	return r
}

func main() {
	println(trap([]int{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1})) //6
	// println(trap([]int{4, 2, 0, 3, 2, 5}))
}
