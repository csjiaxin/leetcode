package main

import "fmt"

type (
	Stack struct {
		top    *node
		length int
	}
	node struct {
		value interface{}
		prev  *node
	}
)

func New() *Stack {
	return &Stack{nil, 0}
}
func (this *Stack) Len() int {
	return this.length
}
func (this *Stack) Peek() interface{} {
	if this.length == 0 {
		return nil
	}
	return this.top.value
}
func (this *Stack) Pop() interface{} {
	if this.length == 0 {
		return nil
	}

	n := this.top
	this.top = n.prev
	this.length--
	return n.value
}
func (this *Stack) Push(value interface{}) {
	n := &node{value, this.top}
	this.top = n
	this.length++
}
func initArr(arr []int, n int, v int) {
	for i := 0; i < n; i++ {
		arr[i] = v
	}
}
func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}
func largestRectangleArea(heights []int) int {
	n := len(heights)

	left := make([]int, n)
	right := make([]int, n)
	initArr(left, n, -1)
	initArr(right, n, n)
	leftStack := New()
	rightStack := New()

	for i, v := range heights {

		for leftStack.Len() > 0 && heights[leftStack.Peek().(int)] >= v {
			leftStack.Pop()
		}
		if leftStack.Len() > 0 {
			left[i] = leftStack.Peek().(int)
		}
		leftStack.Push(i)

		for rightStack.Len() > 0 && heights[rightStack.Peek().(int)] > v {
			top := rightStack.Pop().(int)
			right[top] = i
		}
		rightStack.Push(i)
	}
	// fmt.Printf("%v", left)
	// fmt.Printf("%v", right)
	m := 0
	for i := 0; i < n; i++ {
		l := (right[i] - 1 - (left[i] + 1) + 1)
		m = max(m, l*heights[i])
	}
	return m
}

func main() {
	println(largestRectangleArea([]int{2, 1, 5, 6, 2, 3}))
}
