package main

import (
	"container/heap"
	"fmt"
)

// An IntHeap is a min-heap of ints.
type IntHeap []int

func (h IntHeap) Len() int           { return len(h) }
func (h IntHeap) Less(i, j int) bool { return h[i] > h[j] }
func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *IntHeap) Push(x interface{}) {
	// Push and Pop use pointer receivers because they modify the slice's length,
	// not just its contents.
	*h = append(*h, x.(int))
}

func (h *IntHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}
func maximumScore(a int, b int, c int) int {
	h := make(IntHeap, 0)
	heap.Init(&h)
	heap.Push(&h, a)
	heap.Push(&h, b)
	heap.Push(&h, c)

	ret := 0
	for h.Len() >= 2 {
		a := heap.Pop(&h).(int)
		b := heap.Pop(&h).(int)
		ret += 1

		if a > 1 {
			heap.Push(&h, a-1)

		}
		if b > 1 {

			heap.Push(&h, b-1)
		}

	}
	return ret
}

func main() {
	fmt.Println(maximumScore(4, 4, 6))
}
