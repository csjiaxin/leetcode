package main

import "fmt"

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

var ret int
var id int
var visit [][]int
var dir4 = [][]int{{-1, 0}, {1, 0}, {0, 1}, {0, -1}}

func dfs(grid [][]int, i, j int) {
	m := len(grid)
	n := len(grid[0])
	visit[i][j] = id
	for _, d := range dir4 {
		ni := i + d[0]
		nj := j + d[1]
		if ni < m && ni >= 0 && nj >= 0 && nj < n && visit[ni][nj] == 0 && grid[ni][nj] != 0 {
			dfs(grid, ni, nj)
		}
	}
}
func shortestBridge(grid [][]int) int {
	m := len(grid)
	n := len(grid[0])

	id = 0
	visit = make([][]int, m)
	for i := 0; i < m; i++ {
		visit[i] = make([]int, n)
	}

	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if visit[i][j] == 0 && grid[i][j] != 0 {
				id += 1
				dfs(grid, i, j)
			}
		}
	}
	ret = 0
	q := make([][]int, 0)
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if visit[i][j] == 1 {

				q = append(q, []int{i, j})
			}
		}
	}
	for len(q) > 0 {
		q2 := make([][]int, 0)
		for _, e := range q {

			for _, d := range dir4 {
				ni := e[0] + d[0]
				nj := e[1] + d[1]
				if ni < m && ni >= 0 && nj >= 0 && nj < n {
					if visit[ni][nj] == 0 {
						visit[ni][nj] = 1
						q2 = append(q2, []int{ni, nj})
					} else if visit[ni][nj] == 2 {
						return ret
					}
				}
			}

		}
		ret += 1
		q = q2
	}

	return ret
}

func main() {
	// fmt.Println(shortestBridge([][]int{{0, 1, 0}, {0, 0, 0}, {0, 0, 1}}))
	fmt.Println(shortestBridge([][]int{{0, 1}, {1, 0}}))
}
