package main

import "fmt"

var visit [][]bool
var dir4 = [][]int{{-1, 0}, {1, 0}, {0, 1}, {0, -1}}

func dfs(grid [][]byte, i, j int) {
	m := len(grid)
	n := len(grid[0])
	if !visit[i][j] {
		visit[i][j] = true
		for _, d := range dir4 {
			ni := i + d[0]
			nj := j + d[1]
			if ni < m && ni >= 0 && nj >= 0 && nj < n && grid[ni][nj] != '0' && !visit[ni][nj] {
				dfs(grid, ni, nj)
			}
		}
	}

}
func numIslands(grid [][]byte) int {
	m := len(grid)
	n := len(grid[0])
	visit = make([][]bool, m)
	for i := 0; i < m; i++ {
		visit[i] = make([]bool, n)
	}
	num := 0
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if grid[i][j] != '0' && !visit[i][j] {
				num += 1
				dfs(grid, i, j)
			}
		}
	}
	return num
}

func main() {
	fmt.Println(numIslands([][]byte{{'1', '1', '1', '1', '0'}, {'1', '1', '0', '1', '0'}, {'1', '1', '0', '0', '0'}, {'0', '0', '0', '0', '0'}}))
}
