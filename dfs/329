package main

import "fmt"

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

var ret int
var visit [][]int
var dir4 = [][]int{{-1, 0}, {1, 0}, {0, 1}, {0, -1}}

func dfs(grid [][]int, i, j int) {
	m := len(grid)
	n := len(grid[0])
	visit[i][j] = 1
	for _, d := range dir4 {
		ni := i + d[0]
		nj := j + d[1]
		if ni < m && ni >= 0 && nj >= 0 && nj < n && grid[ni][nj] > grid[i][j] {
			if visit[ni][nj] == 0 {
				dfs(grid, ni, nj)
			}
			visit[i][j] = max(visit[i][j], visit[ni][nj]+1)
		}
	}
}
func longestIncreasingPath(grid [][]int) int {
	m := len(grid)
	n := len(grid[0])

	ret = 0
	visit = make([][]int, m)
	for i := 0; i < m; i++ {
		visit[i] = make([]int, n)
	}

	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if visit[i][j] == 0 {
				dfs(grid, i, j)
			}
		}
	}
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			ret = max(ret, visit[i][j])
		}
	}
	return ret
}

func main() {
	fmt.Println(longestIncreasingPath([][]int{{9, 9, 4}, {6, 6, 8}, {2, 1, 1}}))
}
